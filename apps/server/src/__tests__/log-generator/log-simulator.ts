#!/usr/bin/env bun
import { appendFile, writeFile } from "node:fs/promises";
import { RedisClient } from "bun";
import { SquidLogGenerator } from "@/__tests__/log-generator/log-generator";

/**
 * @description config for log simulator
 */
interface SimulatorConfig {
	logFilePath: string;
	redis: {
		host: string;
		port: number;
		password?: string;
	};
	scenarios: {
		normal: { intervalMs: number; burstSize: number };
		peak: { intervalMs: number; burstSize: number };
		heavy: { intervalMs: number; burstSize: number };
	};
	duration: number; // —Å–µ–∫—É–Ω–¥—ã
	validateRedis: boolean;
}

/**
 * @description Real time log simulator
 */
export class LogSimulator {
	private generator: SquidLogGenerator;
	private config: SimulatorConfig;
	private redisClient?: RedisClient;
	private isRunning = false;

	constructor(config: SimulatorConfig) {
		this.config = config;
		this.generator = new SquidLogGenerator();

		if (config.validateRedis) {
			this.initRedis();
		}
	}

	private async initRedis() {
		try {
			const connectionString = `redis://${this.config.redis.password ? `default:${this.config.redis.password}@` : ""}${this.config.redis.host}:${this.config.redis.port}`;
			this.redisClient = new RedisClient(connectionString);

			console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:", error);
			process.exit(1);
		}
	}

	/**
	 * @description validate new data
	 */
	async validateRedisUpdate(expectedCount: number): Promise<boolean> {
		if (!this.redisClient) return false;

		try {
			const keys = await this.redisClient.keys("log:*");
			const currentCount = keys.length;

			console.log(
				`üìä Records in Redis: ${currentCount}, expected minimum: ${expectedCount}`,
			);

			if (currentCount >= expectedCount) {
				const response = await this.redisClient.send("FT.SEARCH", [
					"log_idx",
					"*",
					"LIMIT",
					"0",
					"3",
				]);
				console.log("üìã Last records:", response.total_results);
				return true;
			}

			return false;
		} catch (error) {
			console.error("‚ùå Error Redis:", error);
			return false;
		}
	}

	async initializeLogFile(): Promise<void> {
		console.log(`üèÅ Init file log: ${this.config.logFilePath}`);

		const initialLogs = this.generator.generateLogLines(50);
		const content = `${initialLogs.join("\n")}\n`;

		await writeFile(this.config.logFilePath, content);
		console.log(`‚úÖ Created ${initialLogs.length} init records`);
	}

	async appendLogLines(lines: string[]): Promise<void> {
		const content = `${lines.join("\n")}\n`;
		await appendFile(this.config.logFilePath, content);

		console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–æ ${lines.length} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥`);
	}

	/**
	 * @description Run scenarios, default normal. `normal | peak | heavy`
	 *
	 */
	async runScenario(
		scenarioName: keyof SimulatorConfig["scenarios"],
		durationMs: number,
	): Promise<void> {
		const scenario = this.config.scenarios[scenarioName];
		const endTime = Date.now() + durationMs;
		let totalAdded = 0;

		console.info(`\nüé¨ : Scenario ${scenarioName.toUpperCase()}`);
		console.log(
			`‚è±Ô∏è  Interval: ${scenario.intervalMs}ms, Burst size: ${scenario.burstSize}`,
		);

		while (Date.now() < endTime && this.isRunning) {
			const lines = this.generator.generateLogLines(scenario.burstSize);

			await this.appendLogLines(lines);
			totalAdded += lines.length;

			await new Promise((resolve) => setTimeout(resolve, scenario.intervalMs));
		}

		console.log(
			`‚úÖ Scenario ${scenarioName} completed. Add ${totalAdded} new records`,
		);

		if (this.config.validateRedis) {
			console.log("‚è≥ Expected updates Redis...");
			await new Promise((resolve) => setTimeout(resolve, 2000));

			const isValid = await this.validateRedisUpdate(totalAdded);
			console.log(
				isValid
					? "‚úÖ Redis successfully updated"
					: "‚ö†Ô∏è Redis hasn't synchronized",
			);
		}
	}

	async runTest(): Promise<void> {
		this.isRunning = true;

		console.log("üöÄ Started");
		console.log(`üìÅ Log file: ${this.config.logFilePath}`);
		console.log(`‚è±Ô∏è  Duration: ${this.config.duration} sec`);

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
		await this.initializeLogFile();

		const totalDuration = this.config.duration * 1000;
		const scenarioTime = Math.floor(totalDuration / 3);

		try {
			// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
			await this.runScenario("normal", scenarioTime);
			await this.runScenario("peak", scenarioTime);
			await this.runScenario("heavy", scenarioTime);
		} catch (error) {
			console.error("‚ùå Test failed:", error);
		} finally {
			this.isRunning = false;
			await this.cleanup();
		}
	}

	/**
	 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	 */
	async stop(): Promise<void> {
		console.log("\nüõë Stopped...");
		this.isRunning = false;
		await this.cleanup();
	}

	/**
	 * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
	 */
	private async cleanup(): Promise<void> {
		if (this.redisClient) {
			console.log("üîå Disable connection Redis");
		}
		console.log("‚úÖ Successfully");
	}
}

export async function runLogSimulatorTest(
	_checkRedisFunction: () => Promise<boolean>,
): Promise<void> {
	const config: SimulatorConfig = {
		logFilePath: process.env["ACCESS_LOG"] || "/tmp/access.log",
		redis: {
			host: "localhost",
			port: 6379,
			password: "123",
		},
		scenarios: {
			normal: { intervalMs: 5000, burstSize: 3 },
			peak: { intervalMs: 2000, burstSize: 10 },
			heavy: { intervalMs: 1000, burstSize: 20 },
		},
		duration: 60,
		validateRedis: true,
	};

	const simulator = new LogSimulator(config);

	process.on("SIGINT", async () => {
		await simulator.stop();
		process.exit(0);
	});

	await simulator.runTest();
}

if (import.meta.main) {
	console.log("üß™ Run test log simulator...");

	const userCheckFunction = async (): Promise<boolean> => {
		console.log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏");
		return true;
	};

	await runLogSimulatorTest(userCheckFunction);
}
