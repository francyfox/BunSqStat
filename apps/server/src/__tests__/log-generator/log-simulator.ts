#!/usr/bin/env bun
import { appendFile, writeFile } from "node:fs/promises";
import { RedisClient } from "bun";
import { SquidLogGenerator } from "@/__tests__/log-generator/log-generator";

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –ª–æ–≥–æ–≤
 */
interface SimulatorConfig {
	logFilePath: string;
	redis: {
		host: string;
		port: number;
		password?: string;
	};
	scenarios: {
		normal: { intervalMs: number; burstSize: number };
		peak: { intervalMs: number; burstSize: number };
		heavy: { intervalMs: number; burstSize: number };
	};
	duration: number; // —Å–µ–∫—É–Ω–¥—ã
	validateRedis: boolean;
}

/**
 * –°–∏–º—É–ª—è—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–æ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */
export class LogSimulator {
	private generator: SquidLogGenerator;
	private config: SimulatorConfig;
	private redisClient?: RedisClient;
	private isRunning = false;

	constructor(config: SimulatorConfig) {
		this.config = config;
		this.generator = new SquidLogGenerator();

		if (config.validateRedis) {
			this.initRedis();
		}
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
	 */
	private async initRedis() {
		try {
			const connectionString = `redis://${this.config.redis.password ? `default:${this.config.redis.password}@` : ""}${this.config.redis.host}:${this.config.redis.port}`;
			this.redisClient = new RedisClient(connectionString);

			console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:", error);
			process.exit(1);
		}
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ Redis
	 */
	async validateRedisUpdate(expectedCount: number): Promise<boolean> {
		if (!this.redisClient) return false;

		try {
			const keys = await this.redisClient.keys("log:*");
			const currentCount = keys.length;

			console.log(
				`üìä –ó–∞–ø–∏—Å–µ–π –≤ Redis: ${currentCount}, –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º: ${expectedCount}`,
			);

			if (currentCount >= expectedCount) {
				// –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
				const response = await this.redisClient.send("FT.SEARCH", [
					"log_idx",
					"*",
					"LIMIT",
					"0",
					"3",
				]);
				console.log("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏–Ω–¥–µ–∫—Å–µ:", response.total_results);
				return true;
			}

			return false;
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis:", error);
			return false;
		}
	}

	/**
	 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –ª–æ–≥–∞
	 */
	async initializeLogFile(): Promise<void> {
		console.log(`üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: ${this.config.logFilePath}`);

		const initialLogs = this.generator.generateLogLines(50, 7200); // 50 –∑–∞–ø–∏—Å–µ–π –∑–∞ 2 —á–∞—Å–∞
		const content = initialLogs.join("\n") + "\n";

		await writeFile(this.config.logFilePath, content);
		console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${initialLogs.length} –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
	}

	/**
	 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
	 */
	async appendLogLines(lines: string[]): Promise<void> {
		const content = lines.join("\n") + "\n";
		await appendFile(this.config.logFilePath, content);

		console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–æ ${lines.length} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥`);
	}

	/**
	 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è
	 */
	async runScenario(
		scenarioName: keyof SimulatorConfig["scenarios"],
		durationMs: number,
	): Promise<void> {
		const scenario = this.config.scenarios[scenarioName];
		const endTime = Date.now() + durationMs;
		let totalAdded = 0;

		console.log(`\nüé¨ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioName.toUpperCase()}`);
		console.log(
			`‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${scenario.intervalMs}–º—Å, –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏: ${scenario.burstSize}`,
		);

		while (Date.now() < endTime && this.isRunning) {
			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
			const lines = this.generator.generateLogLines(
				scenario.burstSize,
				scenario.intervalMs / 1000,
			);

			await this.appendLogLines(lines);
			totalAdded += lines.length;

			// –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
			await new Promise((resolve) => setTimeout(resolve, scenario.intervalMs));
		}

		console.log(
			`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π ${scenarioName} –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ ${totalAdded} –∑–∞–ø–∏—Å–µ–π`,
		);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
		if (this.config.validateRedis) {
			console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Redis...");
			await new Promise((resolve) => setTimeout(resolve, 2000));

			const isValid = await this.validateRedisUpdate(totalAdded);
			console.log(
				isValid
					? "‚úÖ Redis –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
					: "‚ö†Ô∏è Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω",
			);
		}
	}

	/**
	 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	 */
	async runTest(): Promise<void> {
		this.isRunning = true;

		console.log("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –ª–æ–≥–æ–≤");
		console.log(`üìÅ –§–∞–π–ª –ª–æ–≥–æ–≤: ${this.config.logFilePath}`);
		console.log(`‚è±Ô∏è  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.config.duration} —Å–µ–∫—É–Ω–¥`);

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
		await this.initializeLogFile();

		const totalDuration = this.config.duration * 1000;
		const scenarioTime = Math.floor(totalDuration / 3); // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏

		try {
			// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
			await this.runScenario("normal", scenarioTime);
			await this.runScenario("peak", scenarioTime);
			await this.runScenario("heavy", scenarioTime);
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:", error);
		} finally {
			this.isRunning = false;
			await this.cleanup();
		}
	}

	/**
	 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	 */
	async stop(): Promise<void> {
		console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞...");
		this.isRunning = false;
		await this.cleanup();
	}

	/**
	 * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
	 */
	private async cleanup(): Promise<void> {
		if (this.redisClient) {
			// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			console.log("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis");
		}
		console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
export async function runLogSimulatorTest(
	_checkRedisFunction: () => Promise<boolean>,
): Promise<void> {
	const config: SimulatorConfig = {
		logFilePath: process.env["ACCESS_LOG"] || "/tmp/access.log",
		redis: {
			host: "localhost",
			port: 6379,
			password: "123",
		},
		scenarios: {
			normal: { intervalMs: 5000, burstSize: 3 }, // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫, –ø–æ 3 –∑–∞–ø–∏—Å–∏
			peak: { intervalMs: 2000, burstSize: 10 }, // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫, –ø–æ 10 –∑–∞–ø–∏—Å–µ–π
			heavy: { intervalMs: 1000, burstSize: 20 }, // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –ø–æ 20 –∑–∞–ø–∏—Å–µ–π
		},
		duration: 60, // 1 –º–∏–Ω—É—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		validateRedis: true,
	};

	const simulator = new LogSimulator(config);

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	process.on("SIGINT", async () => {
		await simulator.stop();
		process.exit(0);
	});

	await simulator.runTest();
}

// CLI –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.main) {
	console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –ª–æ–≥–æ–≤...");

	// –ü—Ä–∏–º–µ—Ä –ø—É—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º–µ–Ω–∏—Ç –Ω–∞ —Å–≤–æ—é
	const userCheckFunction = async (): Promise<boolean> => {
		console.log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏");
		return true;
	};

	await runLogSimulatorTest(userCheckFunction);
}
