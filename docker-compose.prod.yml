services:
  redis:
    container_name: redis-bunsqstat
    image: redis/redis-stack:7.2.0-v18
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=false
      - REDIS_AOF_ENABLED=no
      - REDIS_PASSWORD=123
    command: sh -c "redis-server ./redis-stack.conf --requirepass $$REDIS_PASSWORD"
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./docker/redis/redis.conf:/redis-stack.conf
      - predis_data:/data
    networks:
      - local

  bunsqstat_server:
    container_name: bunsqstat_server
    restart: unless-stopped
    build:
      context: .
      dockerfile: backend.Dockerfile
      cache_from:
        - server:cache
    environment:
      - NODE_ENV=production
      - SQUID_HOST=127.0.0.1
      - SQUID_PORT=3128
      - LOG_DIR=/app/logs
      - REDIS_HOST=redis-bunsqstat
      - REDIS_PORT=6379
      - REDIS_PASSWORD=123
    ports:
      - "3000:3000"
    volumes:
      - /tmp/access.log:/app/logs/access.log:ro
      - /var/log/squid/cache.log:/app/logs/cache.log:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - local
    healthcheck:
      test: ["CMD", "bun", "-e", "fetch('http://localhost:3000/health').then(r=>r.ok?process.exit(0):process.exit(1)).catch(()=>process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  bunsqstat_client:
    container_name: bunsqstat_client
    restart: unless-stopped
    build:
      context: .
      dockerfile: frontend.Dockerfile
      cache_from:
        - client:cache
    environment:
      - NODE_ENV=production
    ports:
      - "80:80"
    depends_on:
      bunsqstat_server:
        condition: service_healthy
    networks:
      - local

volumes:
  predis_data:

networks:
  local: